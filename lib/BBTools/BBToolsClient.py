# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class BBTools(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver='dev',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('BBTools', job_id)

    def _run_RQCFilter_app_submit(self, params, context=None):
        return self._client._submit_job(
             'BBTools.run_RQCFilter_app', [params],
             self._service_ver, context)

    def run_RQCFilter_app(self, params, context=None):
        """
        :param params: instance of type "RQCFilterAppParams" -> structure:
           parameter "read_library_ref" of String, parameter
           "output_workspace_name" of String, parameter "output_library_name"
           of String, parameter "library" of String, parameter "rna" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "trimfragadapter" of type "boolean" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "qtrim" of String,
           parameter "removemouse" of type "boolean" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "removecat" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "removedog" of type "boolean" (A boolean - 0 for false,
           1 for true. @range (0, 1)), parameter "removehuman" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "removemicrobes" of type "boolean" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "taxlist" of list of
           String, parameter "dedupe" of type "boolean" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "opticaldupes" of
           type "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "RQCFilterAppOutput" -> structure:
           parameter "report_name" of String, parameter "report_ref" of String
        """
        job_id = self._run_RQCFilter_app_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _run_RQCFilter_local_submit(self, params, context=None):
        return self._client._submit_job(
             'BBTools.run_RQCFilter_local', [params],
             self._service_ver, context)

    def run_RQCFilter_local(self, params, context=None):
        """
        :param params: instance of type "RQCFilterLocalParams" (Parameters
           for local version of RQCFilter. read_library_ref - UPA for the
           read library to filter. -OR- reads_file - path to the reads file
           to filter. Expects an interleaved file, if it's paired end. If
           both of the above are given, the read_library_ref takes
           precedence. The rest is as above for the App version.) ->
           structure: parameter "read_library_ref" of String, parameter
           "reads_file" of String, parameter "library" of String, parameter
           "rna" of type "boolean" (A boolean - 0 for false, 1 for true.
           @range (0, 1)), parameter "trimfragadapter" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "qtrim" of String, parameter "removemouse" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "removecat" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1)), parameter "removedog" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "removehuman" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1)), parameter "removemicrobes" of type "boolean"
           (A boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "taxlist" of list of String, parameter "dedupe" of type "boolean"
           (A boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "opticaldupes" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "RQCFilterLocalOutput" (The output from
           the local function version of RQCFilter. output_directory: the
           path to the output directory containing all files generated by
           RQCFilter. filtered_fastq_file: the path to the file (in the
           output directory) containing the filtered FASTQ reads. This will
           likely be compressed, if you need it decompressed, you can use
           DataFileUtil.unpack_file (see that module).) -> structure:
           parameter "output_directory" of String, parameter
           "filtered_fastq_file" of String
        """
        job_id = self._run_RQCFilter_local_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def status(self, context=None):
        job_id = self._client._submit_job('BBTools.status', 
            [], self._service_ver, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]
